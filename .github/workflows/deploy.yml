name: Deploy Illumine Bible App

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: illumine-bible-app/package-lock.json
          
      - name: Install dependencies
        working-directory: ./illumine-bible-app
        run: npm ci
        
      - name: Run security audit
        working-directory: ./illumine-bible-app
        run: npm run security:audit
        
      - name: Run linting
        working-directory: ./illumine-bible-app
        run: npm run lint
        
      - name: Run type checking
        working-directory: ./illumine-bible-app
        run: npm run type-check
        
      - name: Run unit tests
        working-directory: ./illumine-bible-app
        run: npm run test:unit:run
        
      - name: Install Playwright browsers
        working-directory: ./illumine-bible-app
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        working-directory: ./illumine-bible-app
        run: npm run test:e2e
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: illumine-bible-app/test-results/
          retention-days: 30

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: illumine-bible-app/package-lock.json
          
      - name: Install dependencies
        working-directory: ./illumine-bible-app
        run: npm ci
        
      - name: Build application
        working-directory: ./illumine-bible-app
        run: npm run build:production
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_BIBLE_API_KEY: ${{ secrets.VITE_BIBLE_API_KEY }}
          VITE_ANALYTICS_ID: ${{ secrets.VITE_ANALYTICS_ID }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: illumine-bible-app/dist/
          retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add your staging deployment commands here
          # Example: Deploy to Netlify, Vercel, or other staging environment

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Deploy to production
        run: |
          echo "Deploy to production environment"
          # Add your production deployment commands here
          # Example: Deploy to Netlify, Vercel, or other production environment
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful"
          # Add notification logic here (Slack, email, etc.)
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Production deployment failed"
          # Add failure notification logic here